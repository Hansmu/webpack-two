Single page app
A bare-bones HTML file gets sent to the user. Javascript then runs on the user machine to create a full webpage.
We rely on a bunch of Javascript code.

In a SPA we have a ton of Javascript code. In server side rendering/templating there isn't nearly as much JS code.

When you split up your JS codebase into several files(modules), it increases its readability. This, however, has downsides.
Problems that arise:
1) Load order. Some files rely on other files. If it gets loaded in the wrong order, then it all collapses. Load order should be the same every time.
2) More files, slower load times. Downloading dozens of Javascript files cause performance issues. Especially on mobile devices.

Webpack handles these problems by taking all of our JS files and merge them into one large JS file, while making sure execution order is correct for the files.
This is Webpack's primary purpose.

Javascript has several module systems. To name some:
CommonJS (used in NodeJS): Uses 'require', 'module.exports'
AMD (used in frontend): Uses 'require', 'define'
ES2015: Uses 'import', 'export'

Webpack automatically searches for webpack.config.js file.
Specifying entry point for Webpack tells it what to execute first when our application starts up in the browser.
Have to use double quotes in scripts. Should run the local copy inside node_modules. Helps to handle juggling versions between projects.

Webpack takes all of our modules code. Puts them into individual functions, puts them into an array and calls the individual functions from the array.

Module loaders are used to do some pre-processing on them. Often used to transpile to ES5 code. Babel used for that.

For Babel you need 3 modules.
babel-loader: teaches Babel how to work with Webpack. Compatibility layer.
babel-core: knows how to take in code, parse it and generate some output files. Heart of Babel. Doesn't actually know how to change code, need rulesets for that.
babel-preset-env: ruleset for telling Babel exactly what pieces of ES2015/6/7 syntax to look for and how to turn it into ES5 code.
.babelrc tells babel-core what ruleset to check for.

With loaders it makes sense to only apply it to certain files as otherwise errors might arise.

Letting Webpack handle our CSS means we can make use of a bunch of different CSS files. Can import the CSS files to each of the files we care about them in.
css-loader: knows how to deal with CSS imports.
style-loader: takes CSS imports and adds them to the HTML document.
Takes our styles as raw text and injects it into our bundle.js. Then manually puts it into the html file using JS.

When loading images we have to use two loaders.
image-webpack-loader: it will compress the image for us automatically. We then take the result and look at how large it is.
url-loader: behaves differently depending on image size. If the image is small in size, then it will be included inside our bundle.js as raw data.
If it's big then it gets saved in the build directory and it'll be up to us to reference it.

file-loader: tells webpack to extract the required object as a file and return its public url.
The public URL gets added into the bundle.js file in a manner as such: module.exports = __webpack_require__.p + "2de6cada75d3aa596d292ab3f7846456.jpg";

If we define the publicPath property, then the URL loader will prepend it to the URL returned from file-loader.
publicPath will also be prepended to any other loader that uses it.

Codesplitting
Webpack allows to split up our bundle.js and then programmatically decide when to load up our different JS files.
E.g. on login just load up the minimum amount for login and then on the actual content page download all the rest.
When you log in, we want it to be snappy, because that sets the tone for the rest of your application.

When you enable code splitting, just by adding a System.import call, Webpack will automatically change the code that is exported.
Sometimes will inject extra code. Puts the functions into separate bundle.js files. Webpack looks for System.import calls and adds all that additional codesplitting code in the bundle if it sees it.

Browser caching of resources
First visit: Have I downloaded a file before? No. Download it.
Next visit: Have I downloaded a file before? Yes. Download nothing.

Optimization
1) Separate into two separate chunks - our code and vendor code (React, Lodash etc.).
    This is to help with browser caching of resources. You don't update vendor dependencies that often. They happen infrequently.
    Our codebase updates happen a lot more frequently. So when we split we'll download only the part that's changing more often.
    System.import is used when you split your specific code.
